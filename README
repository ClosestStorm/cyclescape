PHP, MySQL and Apache on Lion:
	http://www.coolestguyplanet.net/how-to-install-php-mysql-apache-on-os-x-10-6/
though we don't need PHP or MySQL.


Xcode (to get gcc compilers)
	App Store



Install git
	sudo apt-get git
	or on Mac it is built-in.


DON'T USE apt-get because it gives you out-of-date stuff. Instead use RVM.
RVM:
	Follow http://beginrescueend.com/rvm/install/
	- gets a bootstrap installer file. Do a Single user install, by getting and executing the script, adding it to the path for convenience, then reload the shell.
	bash < <(curl -s https://rvm.beginrescueend.com/install/rvm)
	echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # Load RVM function' >> ~/.bash_profile
	source .bash_profile



Ruby comes with the OS. but is the wrong version so instead, use rvm. This is basically the Ruby Version Manager, that just handles adding Ruby.
	rvm install 1.9.2	#
	rvm use 1.9.2
	# gem install rails	(was done earlier; not using sudo)
	gem install rails -v=3.1
[Both and Simon got "file lib not found" but only at the end of the documentation stage, not the gems themselves.]
	gem install bundler
		NB This will install bundler into the path (NB this path install feature only became available in ruby-1.9.2)
	bundle install
Note that in https://github.com/cyclestreets/toolkit/blob/master/Gemfile the Gemfile doesn't say which version of Ruby you need!!! (mad!)


Go into project directory and add a .rvmrc file to avoid having to type "rvm use 1.9.2" the time; but you do need to be in that directory.
	cd ~/rails/toolkit/
	echo "rvm 1.9.2" > .rvmrc
	# Note that the .gitignore file in the repository has .rvmrc added so that it won't end up in the repository.
This means that next time you do "cd ~/rails/toolkit/" it will come up with a confirmation asking whether you want to read the file. Answer y to accept. This answer will be cached until such time as .rvmrc is changed. This works by rvm hooking into the shell in .bash_profile.



---
Bundler uses the 'Gemfile' and the command for this is 'bundle'

Two ways of running rails applications:

1) Quick, getting started way: go into the application, and do 'rails server', and that gives you http://0.0.0.0:3000/
If more than needed, then rails server -p 3001 instead, and that will be a different port.

2) Proper runtime way: Passenger.
Passenger is basically "mod_rails" i.e. equivalent of mod_php.
The DOCUMENT_ROOT basically is what Apache serves directly and takes precedence.
If a file doesn't match, then Passenger takes over, uses its magic and Rail's magic to translate the path in the /url to the Rails app

To install Passenger:
# Use the ruby package manager, gem, to add the gem passenger
gem install passenger



The public/ subdirectory of an application is what it reads directly and will always serve 
-----



Passenger (basically mod-rails) - see http://www.modrails.com/install.html
	gem install passenger
	passenger-install-apache2-module
	If passenger comes up with instructions to add Apache dependencies, do what it says - the Passenger guys have got it right.
sudo pico -w /etc/apache2/other/passenger.conf
   LoadModule passenger_module /Users/martin/.rvm/gems/ruby-1.9.2-p290/gems/passenger-3.0.9/ext/apache2/mod_passenger.so
   PassengerRoot /Users/martin/.rvm/gems/ruby-1.9.2-p290/gems/passenger-3.0.9
   PassengerRuby /Users/martin/.rvm/wrappers/ruby-1.9.2-p290/ruby
Then restart Apache (on OSX this is best done using System Preferences > Sharing > Untick web sharing, then tick websharing.
So now we have Rails available within Apache as a module.
rvmsudo passenger-status lets you see the current status
The passenger apache module will still see Ruby processes being spawned - it's not fully embedded in Apache like mod_php is.

We now need a virtualhost for the site, which will include rails.
Easiest way to add virtual hosts is to get Passenger Prefpane for Lion OSX. That will create the vhost in a new directory passenger_pane_vhosts/ .
Go into the Prefpane and untick the lock and create a new entry and save. (This has the benefit that it creates a local host name (in practice this doesn't make entry in /etc/hosts but uses a newer architecture called Directory Services))
(However the Passenger Prefpane seems to have a bug that it doesn't include/passenger_pane_vhosts/* into the main httpd.conf. So I have added:
<IfModule passenger_module>
  Include /private/etc/apache2/passenger_pane_vhosts/*.conf
</IfModule>

Note that the vhost had "RailsEnv Development" which tells the application to run in that context.



[We might want to add an example ghost in the README.]


For Github, you need to create a private key.
	Go to GitHub profile, click SSH Keys. Click on the help on the right.
	http://help.github.com/mac-set-up-git/
		Ignore step 2 which is dodgy.
	ssh-keygen -t rsa -C "martin@lucas-smith.co.uk"
		Is sensible to create a new key for each machine, so that they can be rescinded.
	less ~/.ssh/id_rsa.pub
		ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0xqGjXdMfk6CkJsBPHwfc9AgZhPZXe5/gtiQkMN2V+qhpVxzGb1N4qzSD11aQYNhpP1wIgoE+KhNSIHLdvETvls57sKSJouZAZ4lkr7Lk6Q/Nm9LZnpEh+ZqkIRYVO6RWcaCioFcDRje/eXi6vtBm3I0uv6kPjdsLZqNRvUJHkDDuCPsvITV/8PBGvR7vuESnVSnvTyqh+/RbQxku5H2haO7mnaYc9JpQd2wZL111LqGGiJ0rnPYCr74hB/RRAstTVL7N+x13GWJdtMJQLrQVtoOD9hPuPaMv08iezXW6HLoL+ucUVEVOSfbEiWVTynYyFYiAowcj1je8fmEHWPyx martin@lucas-smith.co.uk
	Paste that in at https://github.com/account/ssh
	ssh -T git@github.com
		Enter the password
	

Now we need to get PostgreSQL, the database system we are using.

On Mac Lion 10.7: The best way to get Postgres etc is using 'homebrew', another package manager, to install it.
Installing homebrew:
	Installation details at https://github.com/mxcl/homebrew/wiki/installation
	/usr/bin/ruby -e "$(curl -fsSL https://raw.github.com/gist/323731)"

Now install Postgres and Postgis. Note that homebrew doesn't allow you to specify a version, but Postgres' development path is much more stable than Ruby/Rails, so the latest version should hopefully work OK. Note also that the command is 'brew', not 'homebrew'!
	brew install postgres postgis
	# NB We got a download failed, but re-running the same command worked fine (seems like the host was momentarily down) - rerunning the brew command is safe.
	We got Error: "Failed executing: make install". This is because on OSX Lion the newer compiler LLVM is the default, but not all the software has been tested with it yet, hence the failure; hopefully this will change soon. Therefore we did brew list to show what had been installed fine, then did "brew remove ossp-uuid postgresql proj readline" to remove that list of packages so we were back to a clean state. Then compiled with GCC instead.
	brew install postgres postgis --use-gcc

On Linux:
	Ubuntu: Use the standard package manager to get postgresql. We used https://launchpad.net/~pitti/+archive/postgresql , which said to add ppa:pitti/postgresql to your system's Software Sources. Postgis is also needed; for this we used pap:ubuntigis/ubuntugis-unstable. [Ask Andy Allan what he recommends.]

Start up postgres
	"brew info postgres" will give some info. It says:
	initdb /usr/local/var/postgres
Add it to startup AND start now:
  mkdir -p ~/Library/LaunchAgents
  cp /usr/local/Cellar/postgresql/9.0.4/org.postgresql.postgres.plist ~/Library/LaunchAgents/
  launchctl load -w ~/Library/LaunchAgents/org.postgresql.postgres.plist





Worth getting pgAdmin, for visualising Postgres. This is a native (i.e. not a web-app) DBA tool for postgres, just click the icon to install.
	http://www.pgadmin.org/download/ has standard GUI installer files.


We now have all the server-side software and the ability to get things from GitHub under our username. We now have a developer machine.

[MLS already had an application called 'abstracts' which would run at http://0.0.0.0:3000/ ]

Now we can start work, so we now get the git repo from github.com/cyclestreets !



cd ~/rails/		# i.e. go into our working area
git clone git@github.com:cyclestreets/toolkit.git
cd toolkit
bundle install
# We can do this at any time:
git pull
bundle install


[We got: "Could not find devise-1.4.4 in any of the sources". See http://rubygems.org/gems/devise/versions/1.4.4
so Shaun has updated the repo.]



http://toolkit.byrd.cyclestreets.net/
will now give a result!




Now we need to add a database config for our setup.
	cd ~/rails/toolkit/config
	cp -pr database.example.yml database.yml
	pico -w database.yml

Edit that file to add a password. Make sure that the localhost line is not commented

If any change to config/ gemfile/ and sometimes lib/ , you will need to do
	touch tmp/restart.txt


Create the user and database in Postgres:
	createuser cyclekit -s -P -h localhost
	# Create a database and a user who has access to it at the same time
	createdb -E UTF8 -O cyclekit cyclekit_development -h localhost
	# Also create a database for testing purposes
	createdb -E UTF8 -O cyclekit cyclekit_test -h localhost


Now update the database
	rake db:migrate

i.e. could use convenience one-liner, if you don't have any local changes:
cd ~/rails/toolkit/ && git pull && bundle install && touch tmp/restart.txt && rake db:migrate

rake db:seed
seeds a user. This is in db/seeds.rb

http://toolkit.byrd.cyclestreets.net/issues
and log in as root@cyclestreets.net / changeme


To run the tests:
rake spec
At first this will state permission denied; the database.yml needs to be added.
This runs in the 'test' context (rather than development, which is how Apache is set up).
Running rake spec will recreate the database; therefore if you get a permission denied error, you probably have pgAdmin or another progress connected to it.



WHAT FOLLOWS IS THE DEFAULT RAILS README - which will be deleted in due course.





== Welcome to Rails

Rails is a web-application framework that includes everything needed to create
database-backed web applications according to the Model-View-Control pattern.

This pattern splits the view (also called the presentation) into "dumb"
templates that are primarily responsible for inserting pre-built data in between
HTML tags. The model contains the "smart" domain objects (such as Account,
Product, Person, Post) that holds all the business logic and knows how to
persist themselves to a database. The controller handles the incoming requests
(such as Save New Account, Update Product, Show Post) by manipulating the model
and directing data to the view.

In Rails, the model is handled by what's called an object-relational mapping
layer entitled Active Record. This layer allows you to present the data from
database rows as objects and embellish these data objects with business logic
methods. You can read more about Active Record in
link:files/vendor/rails/activerecord/README.html.

The controller and view are handled by the Action Pack, which handles both
layers by its two parts: Action View and Action Controller. These two layers
are bundled in a single package due to their heavy interdependence. This is
unlike the relationship between the Active Record and Action Pack that is much
more separate. Each of these packages can be used independently outside of
Rails. You can read more about Action Pack in
link:files/vendor/rails/actionpack/README.html.


== Getting Started

1. At the command prompt, create a new Rails application:
       <tt>rails new myapp</tt> (where <tt>myapp</tt> is the application name)

2. Change directory to <tt>myapp</tt> and start the web server:
       <tt>cd myapp; rails server</tt> (run with --help for options)

3. Go to http://localhost:3000/ and you'll see:
       "Welcome aboard: You're riding Ruby on Rails!"

4. Follow the guidelines to start developing your application. You can find
the following resources handy:

* The Getting Started Guide: http://guides.rubyonrails.org/getting_started.html
* Ruby on Rails Tutorial Book: http://www.railstutorial.org/


== Debugging Rails

Sometimes your application goes wrong. Fortunately there are a lot of tools that
will help you debug it and get it back on the rails.

First area to check is the application log files. Have "tail -f" commands
running on the server.log and development.log. Rails will automatically display
debugging and runtime information to these files. Debugging info will also be
shown in the browser on requests from 127.0.0.1.

You can also log your own messages directly into the log file from your code
using the Ruby logger class from inside your controllers. Example:

  class WeblogController < ActionController::Base
    def destroy
      @weblog = Weblog.find(params[:id])
      @weblog.destroy
      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")
    end
  end

The result will be a message in your log file along the lines of:

  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1!

More information on how to use the logger is at http://www.ruby-doc.org/core/

Also, Ruby documentation can be found at http://www.ruby-lang.org/. There are
several books available online as well:

* Programming Ruby: http://www.ruby-doc.org/docs/ProgrammingRuby/ (Pickaxe)
* Learn to Program: http://pine.fm/LearnToProgram/ (a beginners guide)

These two books will bring you up to speed on the Ruby language and also on
programming in general.


== Debugger

Debugger support is available through the debugger command when you start your
Mongrel or WEBrick server with --debugger. This means that you can break out of
execution at any point in the code, investigate and change the model, and then,
resume execution! You need to install ruby-debug to run the server in debugging
mode. With gems, use <tt>sudo gem install ruby-debug</tt>. Example:

  class WeblogController < ActionController::Base
    def index
      @posts = Post.all
      debugger
    end
  end

So the controller will accept the action, run the first line, then present you
with a IRB prompt in the server window. Here you can do things like:

  >> @posts.inspect
  => "[#<Post:0x14a6be8
          @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>,
       #<Post:0x14a6620
          @attributes={"title"=>"Rails", "body"=>"Only ten..", "id"=>"2"}>]"
  >> @posts.first.title = "hello from a debugger"
  => "hello from a debugger"

...and even better, you can examine how your runtime objects actually work:

  >> f = @posts.first
  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>
  >> f.
  Display all 152 possibilities? (y or n)

Finally, when you're ready to resume execution, you can enter "cont".


== Console

The console is a Ruby shell, which allows you to interact with your
application's domain model. Here you'll have all parts of the application
configured, just like it is when the application is running. You can inspect
domain models, change values, and save to the database. Starting the script
without arguments will launch it in the development environment.

To start the console, run <tt>rails console</tt> from the application
directory.

Options:

* Passing the <tt>-s, --sandbox</tt> argument will rollback any modifications
  made to the database.
* Passing an environment name as an argument will load the corresponding
  environment. Example: <tt>rails console production</tt>.

To reload your controllers and models after launching the console run
<tt>reload!</tt>

More information about irb can be found at:
link:http://www.rubycentral.org/pickaxe/irb.html


== dbconsole

You can go to the command line of your database directly through <tt>rails
dbconsole</tt>. You would be connected to the database with the credentials
defined in database.yml. Starting the script without arguments will connect you
to the development database. Passing an argument will connect you to a different
database, like <tt>rails dbconsole production</tt>. Currently works for MySQL,
PostgreSQL and SQLite 3.

== Description of Contents

The default directory structure of a generated Ruby on Rails application:

  |-- app
  |   |-- assets
  |       |-- images
  |       |-- javascripts
  |       `-- stylesheets
  |   |-- controllers
  |   |-- helpers
  |   |-- mailers
  |   |-- models
  |   `-- views
  |       `-- layouts
  |-- config
  |   |-- environments
  |   |-- initializers
  |   `-- locales
  |-- db
  |-- doc
  |-- lib
  |   `-- tasks
  |-- log
  |-- public
  |-- script
  |-- test
  |   |-- fixtures
  |   |-- functional
  |   |-- integration
  |   |-- performance
  |   `-- unit
  |-- tmp
  |   |-- cache
  |   |-- pids
  |   |-- sessions
  |   `-- sockets
  `-- vendor
      |-- assets
          `-- stylesheets
      `-- plugins

app
  Holds all the code that's specific to this particular application.

app/assets
  Contains subdirectories for images, stylesheets, and JavaScript files.

app/controllers
  Holds controllers that should be named like weblogs_controller.rb for
  automated URL mapping. All controllers should descend from
  ApplicationController which itself descends from ActionController::Base.

app/models
  Holds models that should be named like post.rb. Models descend from
  ActiveRecord::Base by default.

app/views
  Holds the template files for the view that should be named like
  weblogs/index.html.erb for the WeblogsController#index action. All views use
  eRuby syntax by default.

app/views/layouts
  Holds the template files for layouts to be used with views. This models the
  common header/footer method of wrapping views. In your views, define a layout
  using the <tt>layout :default</tt> and create a file named default.html.erb.
  Inside default.html.erb, call <% yield %> to render the view using this
  layout.

app/helpers
  Holds view helpers that should be named like weblogs_helper.rb. These are
  generated for you automatically when using generators for controllers.
  Helpers can be used to wrap functionality for your views into methods.

config
  Configuration files for the Rails environment, the routing map, the database,
  and other dependencies.

db
  Contains the database schema in schema.rb. db/migrate contains all the
  sequence of Migrations for your schema.

doc
  This directory is where your application documentation will be stored when
  generated using <tt>rake doc:app</tt>

lib
  Application specific libraries. Basically, any kind of custom code that
  doesn't belong under controllers, models, or helpers. This directory is in
  the load path.

public
  The directory available for the web server. Also contains the dispatchers and the
  default HTML files. This should be set as the DOCUMENT_ROOT of your web
  server.

script
  Helper scripts for automation and generation.

test
  Unit and functional tests along with fixtures. When using the rails generate
  command, template test files will be generated for you and placed in this
  directory.

vendor
  External libraries that the application depends on. Also includes the plugins
  subdirectory. If the app has frozen rails, those gems also go here, under
  vendor/rails/. This directory is in the load path.
