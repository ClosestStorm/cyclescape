:ruby
  zoom = Geo::POINT_ZOOM
  @map = basic_map do |map, page|
    if issue.location.geometry_type == RGeo::Feature::Point
      page << map.setCenter(OpenLayers::LonLat.new(issue.location.x,issue.location.y).transform(projection, map.getProjectionObject()),zoom);

      markerlayer = MapLayers::JsVar.new('markerlayer')
      icon = MapLayers::JsVar.new('icon')
      page.assign(markerlayer, OpenLayers::Layer::Markers.new( "Location", { projection: projection }))
      page << map.addLayer(markerlayer)
      page.assign(icon, OpenLayers::Icon.new('/openlayers/img/marker-blue.png'))
      page << markerlayer.addMarker(OpenLayers::Marker.new(OpenLayers::LonLat.new(issue.location.x, issue.location.y).transform(projection, map.getProjectionObject()), icon))
    else
      bbox = RGeo::Cartesian::BoundingBox.new(issue.location.factory)
      bbox.add(issue.location)
      page << map.zoomToExtent(OpenLayers::Bounds.new(bbox.min_x, bbox.min_y, bbox.max_x, bbox.max_y).transform(projection, map.getProjectionObject()))

      locationlayer = MapLayers::JsVar.new('locationlayer')
      protocol = OpenLayers::Protocol::HTTP.new( url: geometry_issue_path(issue, :json), format: :format_plain )
      page.assign(locationlayer, OpenLayers::Layer::Vector.new( "Location", protocol: protocol, projection: projection, strategies: [OpenLayers::Strategy::Fixed.new() ]))
      page << map.addLayer(locationlayer)
    end
  end

%div#map
!= @map.to_html
